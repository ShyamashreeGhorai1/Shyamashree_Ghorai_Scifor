# -*- coding: utf-8 -*-
"""MultipleLinearRegression_Shyamashree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y33uhfUtQ6PG3e4VqSbLJa5lETVL3Rmw
"""

import io
from google.colab import files

uploaded = files.upload()

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

df = pd.read_csv("Housing.csv")

df

df.isnull().sum()

df.duplicated().sum()

df.info()

df.describe()

df['mainroad'] = df['mainroad'].replace(['yes','no'],[1,0])
df['guestroom'] = df['guestroom'].replace(['yes','no'],[1,0])
df['basement'] = df['basement'].replace(['yes','no'],[1,0])
df['hotwaterheating'] = df['hotwaterheating'].replace(['yes','no'],[1,0])
df['airconditioning'] = df['airconditioning'].replace(['yes','no'],[1,0])
df['prefarea'] = df['prefarea'].replace(['yes','no'],[1,0])
df['furnishingstatus'] = df['furnishingstatus'].replace(['furnished','semi-furnished','unfurnished'],[2,1,0])

x = df.iloc[:,1:].values
y = df.iloc[:,0].values

# train test split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Adding a column for intercept term
x_train = np.insert(x_train,0,1,axis=1)
x_test = np.insert(x_test,0,1,axis=1)

def linearRegression(x, y, learning_rate, epochs):
  samples, features = x.shape
  weights = np.zeros(features)

  for epoch in range(epochs):
    predictions = np.dot(x, weights)
    gradient = 1/(samples)*np.sum(x.T*(predictions - y))
    weights -= learning_rate*gradient

  return weights

learning_rate = 0.000000000001
epochs = 100000
weights = linearRegression(x_train, y_train, learning_rate, epochs)

y_pred = np.dot(x_test, weights)

RMSE = np.sqrt(np.mean((y_pred - y_test)**2))
MSE = np.mean((y_pred-y_test)**2)
MAE = np.mean(np.abs((y_pred-y_test)))
R2 = 1 - (MSE/ np.sum((y_test - np.mean(y_test))**2))

print("Root-mean-square-error is:",RMSE)
print("Mean-square-error is:", MSE)
print("Mean-absolute-error is:",MAE)
print("R-squared error is:", R2)

import seaborn as sns
import matplotlib.pyplot as plt
sns.regplot(x=y_test, y=y_pred)
plt.xlabel('Actual Value')
plt.ylabel('Predicted Value')
plt.title('Actual Value vs Predicted Value')



